{
    "__type__": "Deck",
    "children": [],
    "crowdanki_uuid": "e48ddf90-3b80-11ea-98f8-6214b3b1c8f9",
    "deck_config_uuid": "e48e0688-3b80-11ea-af01-6214b3b1c8f9",
    "deck_configurations": [
        {
            "__type__": "DeckConfig",
            "autoplay": true,
            "crowdanki_uuid": "e48e0688-3b80-11ea-af01-6214b3b1c8f9",
            "dyn": false,
            "lapse": {
                "delays": [
                    10
                ],
                "leechAction": 0,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.0
            },
            "maxTaken": 60,
            "name": "Default",
            "new": {
                "bury": false,
                "delays": [
                    1,
                    10
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    4,
                    7
                ],
                "order": 1,
                "perDay": 20,
                "separate": true
            },
            "replayq": true,
            "rev": {
                "bury": false,
                "ease4": 1.3,
                "fuzz": 0.05,
                "hardFactor": 1.2,
                "ivlFct": 1.0,
                "maxIvl": 36500,
                "minSpace": 1,
                "perDay": 200
            },
            "timer": 0
        }
    ],
    "desc": "",
    "dyn": 0,
    "extendNew": 10,
    "extendRev": 50,
    "media_files": [],
    "mid": "1577206879374",
    "name": "C# 70-483 ",
    "note_models": [
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "css": ".card {\n font-family: arial;\n font-size: 18px;\n text-align: left;\n color: black;\n background-color: white;\n}\n.page {\n  font-family: arial;\n  font-size: 15px;\n  text-align: right;\n  color: red;\n}\n.code {\n  font-size: 15px;\n}",
            "flds": [
                {
                    "font": "Arial",
                    "media": [],
                    "name": "Front",
                    "ord": 0,
                    "rtl": false,
                    "size": 18,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "media": [],
                    "name": "Back",
                    "ord": 1,
                    "rtl": false,
                    "size": 18,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "media": [],
                    "name": "Code",
                    "ord": 2,
                    "rtl": false,
                    "size": 15,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "media": [],
                    "name": "BackCode",
                    "ord": 3,
                    "rtl": false,
                    "size": 15,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "media": [],
                    "name": "Page",
                    "ord": 4,
                    "rtl": false,
                    "size": 15,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "name": "Code",
            "req": [
                [
                    0,
                    "any",
                    [
                        0,
                        2
                    ]
                ]
            ],
            "sortf": 0,
            "tags": [
                "Ch2::Value&Reference"
            ],
            "tmpls": [
                {
                    "afmt": "{{Front}}\n\n<hr id=answer>\n\n{{Back}}\n\n<div class=\"code\">{{BackCode}}</div>\n<hr>\n<div class=\"code\">{{Code}}</div>\n<hr>\n\n<div class=\"page\">{{Page}}</div>\n",
                    "bafmt": "",
                    "bqfmt": "",
                    "did": null,
                    "name": "Card 1",
                    "ord": 0,
                    "qfmt": "{{Front}}\n<hr>\n<div class=\"code\">{{Code}}</div>\n"
                }
            ],
            "type": 0,
            "vers": []
        },
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "e48ef04b-3b80-11ea-923c-6214b3b1c8f9",
            "css": ".card {\n font-family: arial;\n font-size: 20px;\n text-align: center;\n color: black;\n background-color: white;\n}\n\n.cloze {\n font-weight: bold;\n color: blue;\n}\n.nightMode .cloze {\n color: lightblue;\n}",
            "flds": [
                {
                    "font": "Arial",
                    "media": [],
                    "name": "Text",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "media": [],
                    "name": "Extra",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "name": "Cloze",
            "sortf": 0,
            "tags": [
                "Ch2::Value&Reference"
            ],
            "tmpls": [
                {
                    "afmt": "{{cloze:Text}}<br>\n{{Extra}}",
                    "bafmt": "",
                    "bqfmt": "",
                    "did": null,
                    "name": "Cloze",
                    "ord": 0,
                    "qfmt": "{{cloze:Text}}"
                }
            ],
            "type": 1,
            "vers": []
        }
    ],
    "notes": [
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<div>What is wrong with the following snippet?</div>",
                "<div>The counter [i] that is passed in the lambda expression will always be 10, the value of the limit of the loop.<br></div>",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4\n5\n6\n7\n8\n9</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n{\n\tTask [] Tasks = <span style=\"color: #008000; font-weight: bold\">new</span> Task[<span style=\"color: #666666\">10</span>]\n\t<span style=\"color: #008000; font-weight: bold\">for</span> (<span style=\"color: #B00040\">int</span> i = <span style=\"color: #666666\">0</span>; i &lt; <span style=\"color: #666666\">10</span>; i++)\n\t{\n\t\tTasks[i] = Task.Run( () =&gt; DoSomething(i) );\n\t}\n\tTask.WaitAll(Tasks);\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "",
                "12"
            ],
            "flags": 0,
            "guid": "iM%k7!oz:[",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Task"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<div>What do Task.WaitAll and Task.WaitAny do, and how do they differ?</div>",
                "<div>Both pause execution to wait for the completion of tasks.&nbsp;</div><div><br></div><div>WaitAll waits until all tasks have finished, whereas WaitAny pauses until the first task has finished. This means that some tasks may continue running after WaitAny has returned.</div>",
                "",
                "",
                "12"
            ],
            "flags": 0,
            "guid": "v:q(xq|LFp",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Task"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<div>What happens when someTask.Result is read before the task finishes operations?</div>",
                "<div>Code execution will wait.</div>",
                "",
                "",
                "10"
            ],
            "flags": 0,
            "guid": "MG+w=K_3}~",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Task"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<div>What is the preferred way to create a simple task?</div>",
                "<div>Calling Task.Run with a task. The Run method is sugar for the TaskFactory.StartNew() method with the default scheduler (.NET Framework thread pool)</div>",
                "",
                "<center><br></center><center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #B00040\">var</span> task = Task.Run((x) =&gt; {\n    DoSomething(x);\n});\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "11"
            ],
            "flags": 0,
            "guid": "f7oFSQ+$t2",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Task"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<div>How does the ForAll method on a PLINQ result differ from a foreach?</div>",
                "<div>It runs in parallel, and starts before the query has finished. NB. this means the order will not reflect ordering of input data.</div>",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Program</span>\n{\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n\t{\n\t\t<span style=\"color: #B00040\">var</span> result = <span style=\"color: #008000; font-weight: bold\">from</span> person <span style=\"color: #008000; font-weight: bold\">in</span>\n\t\t\tpeople.AsParallel()\n\t\t\t<span style=\"color: #008000; font-weight: bold\">where</span> person.City == <span style=\"color: #BA2121\">\"Seattle\"</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">select</span> person;\n\n\t\tresult.ForAll(person =&gt; Console.WriteLine(person.Name));\n\t}\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "",
                "9"
            ],
            "flags": 0,
            "guid": "eX8tV,]lWu",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "PLINQ"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<div>What do AsSequential and AsOrdered do, and how do they differ?</div>",
                "<div>AsOrdered preservers data order when returning a query that has been run in parallel, by organising the output to be the same as the original data. This incurs a time cost after the original query to reorder results.</div><div><br></div><div>AsSequential runs (part of) a query sequentially, therefore always returns the data in order. This incurs a time cost because this part of the query is not run in parallel.</div><div><br></div><div>Both output ordered data, but AsOrdered runs the query in parallel, while AsSequential does not.</div>",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #B00040\">var</span> result = <span style=\"color: #008000; font-weight: bold\">from</span> person <span style=\"color: #008000; font-weight: bold\">in</span>\n    people.AsParallel().AsOrdered()\n    <span style=\"color: #008000; font-weight: bold\">where</span> person.City == <span style=\"color: #BA2121\">\"Utrecht\"</span>\n    <span style=\"color: #008000; font-weight: bold\">select</span> person;\n</pre></div>\n</td></tr></tbody></table></center><center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4\n5\n6\n7\n8</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #B00040\">var</span> result = (<span style=\"color: #008000; font-weight: bold\">from</span> person <span style=\"color: #008000; font-weight: bold\">in</span>\n    people.AsParallel()\n    <span style=\"color: #008000; font-weight: bold\">where</span> person.City == <span style=\"color: #BA2121\">\"Utrecht\"</span>\n    <span style=\"color: #008000; font-weight: bold\">orderby</span> person.Name\n    <span style=\"color: #008000; font-weight: bold\">select</span> <span style=\"color: #008000; font-weight: bold\">new</span>\n    {\n\tName = person.Name\n    }).AsSequential().Take(<span style=\"color: #666666\">4</span>)\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "",
                "8"
            ],
            "flags": 0,
            "guid": "oJ+TGZxB.9",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "PLINQ"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<div>When is a PLINQ query actually run in parallel? (2)</div>",
                "- when the AsParallel method determines that running the query in parallel grants a performance benefit&nbsp;<div>- when WithExectionMode(ParallelExecutionMode.ForceParallelism) is set</div>",
                "",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4\n5\n6</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #B00040\">var</span> result = <span style=\"color: #008000; font-weight: bold\">from</span> person <span style=\"color: #008000; font-weight: bold\">in</span>\n    people.AsParallel()\n          .WithDegreeOfParallelism(<span style=\"color: #666666\">4</span>)\n\t  .WithExecutionMode(ParallelExecutionMode.ForceParallelism)\n    <span style=\"color: #008000; font-weight: bold\">where</span> person.City == <span style=\"color: #BA2121\">\"Utrecht\"</span>\n    <span style=\"color: #008000; font-weight: bold\">select</span> person;\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "7"
            ],
            "flags": 0,
            "guid": "vy,k{0~.|.",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "PLINQ"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<div>How do you invoke a parallel version of a LINQ query?</div>",
                "<div>By calling the AsParallel() method</div><div><br></div><div><div>NB. AsParallel requests can be further specified, e.g. run in parallel regardless of performance expectations or on x number of processors.</div></div>",
                "",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #B00040\">var</span> result = <span style=\"color: #008000; font-weight: bold\">from</span> foo </pre><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">             in</span> foos.AsParallel()</pre><pre style=\"line-height: 125%\">             <span style=\"color: #008000; font-weight: bold\">where</span> ... </pre><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">             select</span> ...;\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "7"
            ],
            "flags": 0,
            "guid": "gLv3N04R;1",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "PLINQ"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<div>Parallel.For and Parallel.ForEach both return a ... that can be used to ...</div>",
                "<div>ParallelLoopResult</div><div>determine whether a parallel loop has successfully completed</div>",
                "",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4\n5</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\">ParallelLoopResult result = Parallel.For(<span style=\"color: #666666\">0</span>, <span style=\"color: #666666\">42</span>, (<span style=\"color: #B00040\">int</span> i, ParallelLoopState state) =&gt; {\n    <span style=\"color: #008000; font-weight: bold\">if</span> (i == <span style=\"color: #666666\">6</span>)\n\tstate.Stop();\n    DoStuff(i);\n});\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "5"
            ],
            "flags": 0,
            "guid": "vV>PP[v&we",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Parallel"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<div>What is the difference between Break and Stop methods on the ParallelLoopState variable?</div>",
                "<div>Stop will immediately stop execution of the parallel loop, while Break will guarantee completion of already running iterations before ending the loop.</div>",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4\n5\n6\n7</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\">ParallelLoopResult result = Parallel.For(<span style=\"color: #666666\">0</span>, items.Count(), (<span style=\"color: #B00040\">int</span> i, ParallelLoopState loopState) =&gt; {\n    <span style=\"color: #008000; font-weight: bold\">if</span> (i == <span style=\"color: #666666\">200</span>)\n\tloopState.Stop();\n\t<span style=\"color: #408080; font-style: italic\">// VS</span>\n\tloopState.Break();\n    ...\n});\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "",
                "6"
            ],
            "flags": 0,
            "guid": "rA+jp>dw]Y",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Parallel"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<div>What is an Action delegate?</div>",
                "<div>An encapsulation of a method that accepts no parameters and returns no result.</div>",
                "",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\">Parallel.Invoke(&lt;Action&gt;, &lt;Action&gt;);\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "3"
            ],
            "flags": 0,
            "guid": "DYYsx}UVA3",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Parallel"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<div>What three methods does Task.Parallel contain to execute tasks in parallel?</div>",
                "- Invoke<div>- ForEach</div><div>- For</div><div><br></div><div>You have no control over the order in which tasks are run, or which processor they are assigned to.</div>",
                "",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\">Parallel.Invoke(() =&gt; Task1(), ..., () =&gt; TaskN());\n</pre></div>\n</td></tr></tbody></table><center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Program</span>\n{\n\t<span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">WorkOnItem</span>(<span style=\"color: #B00040\">object</span> item)\n\t{\n\t\tThread.Sleep(<span style=\"color: #666666\">100</span>);\n\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"finished {0}\"</span>, item);\n\t}\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n\t{\n\t\t<span style=\"color: #B00040\">var</span> items = Enumerable.Range(<span style=\"color: #666666\">0</span>, <span style=\"color: #666666\">500</span>);\n\t\tParallel.ForEach(items, item =&gt; {\n\t\t\tWorkOnItem(item);\n\t\t});\n\t}\n}\n</pre></div>\n</td></tr></tbody></table></center><center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Program</span>\n{\n\t<span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">WorkOnItem</span>(<span style=\"color: #B00040\">object</span> item)\n\t{\n\t\tThread.Sleep(<span style=\"color: #666666\">100</span>);\n\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"finished {0}\"</span>, item);\n\t}\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n\t{\n\t\t<span style=\"color: #B00040\">var</span> items = Enumerable.Range(<span style=\"color: #666666\">0</span>, <span style=\"color: #666666\">500</span>).ToArray();\n\t\t\n\t\tParallel.For(<span style=\"color: #666666\">0</span>, items.length, i =&gt; {\n\t\t\tWorkOnItem(i);\n\t\t});\n\t}\n}\n</pre></div>\n</td></tr></tbody></table></center><br></center><br>",
                "3"
            ],
            "flags": 0,
            "guid": "p6?E!ctv7b",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Parallel",
                "Task"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a continuation task?",
                "A task that starts when an antecedent task finishes, creating a pipeline of operations.",
                "",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Program</span>\n{\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">HelloTask</span>()\n\t{\n\t\tThread.Sleep(<span style=\"color: #666666\">1000</span>);\n\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"Hello\"</span>);\n\t}\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">WorldTask</span>()\n\t{\n\t\tThread.Sleep(<span style=\"color: #666666\">1000</span>);\n\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"World\"</span>);\n\t}\n\t\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n\t{\n\t\tTask task = Task.Run(() =&gt; HelloTask());\n\t\ttask.ContinueWith((previous) =&gt; WorldTask());\n\t}\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "12"
            ],
            "flags": 0,
            "guid": "7V)k3bR[H",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Task"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A continuation task always runs when a previous task ends. Correct?",
                "No.<div><br><div>There is an overload on the ContinueWith method that allows you to specify when a continuation task should be run.</div></div>",
                "<div><center><br></center></div>",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\">task.ContinueWith((previous) =&gt; NextTask(), TaskContinuationOptions.OnlyOnRanToCompletion);\ntask.ContinueWith((previous) =&gt; NextTask(), TaskContinuationOptions.OnlyOnCanceled);\ntask.ContinueWith((previous) =&gt; NextTask(), TaskContinuationOptions.OnlyOnFaulted);\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "13"
            ],
            "flags": 0,
            "guid": "P.`#;?OEqS",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Task"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "By default, Child tasks are attached to their parent task, and the parent task only completes when its children have completed. Correct?",
                "No.<div>Child tasks are detached by default, and run independently from their parent.</div><div>There is a task creation option to specify that a child task is attached to the parent.</div>",
                "",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Program</span>\n{\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">DoChild</span>(<span style=\"color: #B00040\">object</span> state)\n\t{\n\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"start {0}\"</span>, state);\n\t\tThread.Sleep(<span style=\"color: #666666\">1000</span>);\n\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"finished {0}\"</span>, state);\n\t}\n\t\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n\t{\n\t\t<span style=\"color: #B00040\">var</span> parent = Task.Factory.StartNew(() =&gt; {\n\t\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"Parent\"</span>);\n\t\t\t<span style=\"color: #008000; font-weight: bold\">for</span> (<span style=\"color: #B00040\">int</span> i = <span style=\"color: #666666\">0</span>; i &lt; <span style=\"color: #666666\">10</span>; i++)\n\t\t\t{\n\t\t\t\t<span style=\"color: #B00040\">int</span> taskNo = i;\n\t\t\t\tTask.Factory.StartNew(\n\t\t\t\t\t(x) =&gt; DoChild(x),\n\t\t\t\t\t\t   taskNo,\n\t\t\t\t\t\t   TaskCreationOptions.AttachedToParent);\n\t\t\t}\n\t\t});\n\t\t\n\t\tparent.Wait();\n\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"Parent finished\"</span>);\n\t}\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "14"
            ],
            "flags": 0,
            "guid": "lOf>4B`Bk(",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Task"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is wrong with the following code?",
                "The child tasks are not attached to the parent task, because Task.Run sets TaskCreationOptions.DenyChildAttach to the parent task.<div><br></div><div>Note that this does not prevent code execution.</div>",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Program</span>\n{\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">DoChild</span>(<span style=\"color: #B00040\">object</span> state)\n\t{\n\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"start {0}\"</span>, state);\n\t\tThread.Sleep(<span style=\"color: #666666\">1000</span>);\n\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"finished {0}\"</span>, state);\n\t}\n\t\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n\t{\n\t\t<span style=\"color: #B00040\">var</span> parent = Task.Run(() =&gt; {\n\t\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"Parent\"</span>);\n\t\t\t<span style=\"color: #008000; font-weight: bold\">for</span> (<span style=\"color: #B00040\">int</span> i = <span style=\"color: #666666\">0</span>; i &lt; <span style=\"color: #666666\">10</span>; i++)\n\t\t\t{\n\t\t\t\t<span style=\"color: #B00040\">int</span> taskNo = i;\n\t\t\t\tTask.Factory.StartNew(\n\t\t\t\t\t(x) =&gt; DoChild(x),\n\t\t\t\t\t\t   taskNo,\n\t\t\t\t\t\t   TaskCreationOptions.AttachedToParent);\n\t\t\t}\n\t\t});\n\t\t\n\t\tparent.Wait();\n\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"Parent finished\"</span>);\n\t}\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "",
                "15"
            ],
            "flags": 0,
            "guid": "x}A.<;k,,D",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Task"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What's the difference between a Task and a thread? (6)",
                "<ul>\n<li>Threads are <i>foreground</i>&nbsp;processes, tasks are <i>background</i>&nbsp;processes</li>\n<li>\nThreads have a priority setting that influences available processor time, and which can be changed during its lifetime. Tasks do not.\n</li>\n<li>\nThreads have an Abort method, whereas a Task must monitor a Cancellation token.\n</li>\n<li>\nTasks can deliver results to each other. Threads can only communicate through shared variables (!).\n</li>\n<li>\nTasks can be given a continuation Task. Threads instead have a join function which will pause execution until another thread has completed\n</li>\n<li>\nTasks can aggregate errors. Threads must deal with their errors inside the thread.\n</li>\n</ul>\n<div>NB. Threads have an IsBackground property that can be set to True. Threads on a threadpool are set as background processes by default.</div>\n<div><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.threading.thread.isbackground?view=netframework-4.8\">docs</a><br></div>",
                "",
                "",
                "15"
            ],
            "flags": 0,
            "guid": "EsI,vGO~*A",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Threads"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Unlike with Tasks, the operating system will always wait for a thread to complete. Correct?",
                "Yes.<div><br></div><div>A thread creates a foreground process, which means the application will not terminate until it has completed.</div><div>Tasks create background processes, which are terminated if the application terminates.</div>",
                "",
                "",
                "15"
            ],
            "flags": 0,
            "guid": "J)sGLelCi]",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Threads"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is missing in this code snippet?",
                "The thread is created but never executed.<div>Call the start method on the thread to execute.</div>",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Program</span>\n{\n\t<span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">HelloThread</span>()\n\t{\n\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"Hello\"</span>);\n\t\tThread.Sleep(<span style=\"color: #666666\">2000</span>);\n\t}\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n\t{\n\t\tThread thread = <span style=\"color: #008000; font-weight: bold\">new</span> Thread(HelloThread);\n\t}\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "",
                "15"
            ],
            "flags": 0,
            "guid": "hSI,g32LZ]",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Threads"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is interesting about the following code?",
                "The thread is started using a ThreadStart delegate to wrap the method to be executed. This is no longer required.",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4\n5\n6</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n{\n    ThreadStart ts = <span style=\"color: #008000; font-weight: bold\">new</span> ThreadStart(HelloThread);\n    Thread thread = <span style=\"color: #008000; font-weight: bold\">new</span> Thread(ts);\n    thread.Start();\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "",
                "16"
            ],
            "flags": 0,
            "guid": "o<w^-*e,9d",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Threads"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Describe two ways to pass data to a thread.",
                "- use a ParameterizedThreadStart delegate OR<div>- specify the thread with a function that accepts a parameter.</div><div><br></div><div>then pass the data to the thread.Start method<br></div><div><br></div><div>NB. the book parameterizes a lambda function that wraps the HelloThread function, i.e.</div><div><center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\">new Thread((data) =&gt; HelloThread(data))\n</pre></div>\n</td></tr></tbody></table></center>this seems redundant?</div>",
                "",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Program</span>\n{\n\t<span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">HelloThread</span>(<span style=\"color: #B00040\">object</span> data)\n\t{\n\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"Hello {0}\"</span>, data);\n\t\tThread.Sleep(<span style=\"color: #666666\">2000</span>);\n\t}\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n\t{\n\t\tParameterizedThreadStart ts = <span style=\"color: #008000; font-weight: bold\">new</span> ParameterizedThreadStart(HelloThread);\n\t\tThread thread = <span style=\"color: #008000; font-weight: bold\">new</span> Thread(ts);\n\t\tthread.Start(<span style=\"color: #BA2121\">\"World\"</span>);\n\t}\n}\n</pre></div>\n</td></tr></tbody></table></center><center><center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Program</span>\n{\n\t<span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">HelloThread</span>(<span style=\"color: #B00040\">object</span> data)\n\t{\n\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"Hello {0}\"</span>, data);\n\t\tThread.Sleep(<span style=\"color: #666666\">2000</span>);\n\t}\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n\t{\n\t\tThread thread = <span style=\"color: #008000; font-weight: bold\">new</span> Thread(HelloThread);\n\t\tthread.Start(<span style=\"color: #BA2121\">\"World\"</span>);\n\t}\n}\n</pre></div>\n</td></tr></tbody></table></center><br></center><br>",
                "17"
            ],
            "flags": 0,
            "guid": "AvceOp},aY",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Threads"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Data passed to a thread is not type-safe. Correct?",
                "Correct.<div><br></div><div>Data is passed as an object reference. The type of object is unknown at compile time.</div>",
                "",
                "",
                "18"
            ],
            "flags": 0,
            "guid": "ru;~?:H&VZ",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Threads"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Describe two ways of stopping a thread.",
                "- calling the thread.Abort method. This will instantly terminate the thread.<div>- ending thread operations based on a shared variable&nbsp;</div>",
                "",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Program</span>\n{\n\t<span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">TickThread</span>()\n\t{\n\t\t<span style=\"color: #008000; font-weight: bold\">while</span> (<span style=\"color: #008000; font-weight: bold\">true</span>)\n\t\t{\n\t\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"tick\"</span>);\n\t\t\tThread.Sleep(<span style=\"color: #666666\">1000</span>);\n\t\t}\n\t}\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n\t{\n\t\tThread tick = <span style=\"color: #008000; font-weight: bold\">new</span> Thread(TickThread);\n\t\ttick.Start();\n\t\t\n\t\tThread.Sleep(<span style=\"color: #666666\">5000</span>);\n\t\ttick.Abort();\n\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"Terminated\"</span>);\n\t}\n}\n</pre></div>\n</td></tr></tbody></table></center><center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Program</span>\n{\n\t<span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #B00040\">bool</span> isRunning = <span style=\"color: #008000; font-weight: bold\">true</span>;\n\t<span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">TickThread</span>()\n\t{\n\t\t<span style=\"color: #008000; font-weight: bold\">while</span> (isRunning)\n\t\t{\n\t\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"tick\"</span>);\n\t\t\tThread.Sleep(<span style=\"color: #666666\">1000</span>);\n\t\t}\n\t}\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n\t{\n\t\tThread tick = <span style=\"color: #008000; font-weight: bold\">new</span> Thread(TickThread);\n\t\ttick.Start();\n\t\t\n\t\tThread.Sleep(<span style=\"color: #666666\">3000</span>);\n\t\tisRunning = <span style=\"color: #008000; font-weight: bold\">false</span>;\n\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"Terminated\"</span>);\n\t}\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "18"
            ],
            "flags": 0,
            "guid": "dMoZ+OeT|4",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Threads"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How do you wait for a thread to complete?",
                "By using the thread.Join method.",
                "",
                "",
                "19"
            ],
            "flags": 0,
            "guid": "C9X(]>PdWf",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": []
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does ThreadLocal do?",
                "When created, an instance of ThreadLocal has a delegate to code that initializes thread-specific attributes.<div>It can be used to initialize attributes per thread.</div><div><br></div><div>E.g. a random-number generator that is local to each thread, but initialized the same for each thread.</div>",
                "",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Program</span>\n{\n\t<span style=\"color: #008000; font-weight: bold\">static</span> ThreadLocal&lt;Random&gt; RandomGenerator =\n\t\t<span style=\"color: #008000; font-weight: bold\">new</span> ThreadLocal&lt;Random&gt;(() =&gt; {\n\t\t\t<span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #0000FF\">Random</span>(<span style=\"color: #666666\">2</span>);\n\t\t});\n\t<span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">RandomThread</span>()\n\t{\n\t\t<span style=\"color: #008000; font-weight: bold\">for</span> (<span style=\"color: #B00040\">int</span> i = <span style=\"color: #666666\">0</span>; i &lt; <span style=\"color: #666666\">5</span>; i++)\n\t\t{\n\t\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"{0}\"</span>, RandomGenerator.Value.Next(<span style=\"color: #666666\">10</span>));\n\t\t\tThread.Sleep(<span style=\"color: #666666\">500</span>);\n\t\t}\n\t}\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n\t{\n\t\tThread t1 = <span style=\"color: #008000; font-weight: bold\">new</span> Thread(RandomThread);\n\t\tThread t2 = <span style=\"color: #008000; font-weight: bold\">new</span> Thread(RandomThread);\n\t\tt1.Start();\n\t\tt2.Start();\n\n\t\tt1.Join();\n\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"Terminated\"</span>);\n\t}\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "20"
            ],
            "flags": 0,
            "guid": "b7K?KfMahQ",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Threads"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does this code do?<div><br></div><div>What can you say about the expected output of the program?</div>",
                "It generates two threads.<div>Each thread will output 5 random numbers from a random number generator.</div><div>The rng is created with ThreadLocal, meaning that it is initialized the same for each thread, but the returned value (the rng) local to each thread.</div><div><br></div><div>This means that the program will output 2x5 random numbers, and that the 'random' number will be the same for each thread per iteration.</div><div>E.g. 7-7, 4-4, 1-1, 9-9, 1-1</div>",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Program</span>\n{\n\t<span style=\"color: #008000; font-weight: bold\">static</span> ThreadLocal&lt;Random&gt; RandomGenerator =\n\t\t<span style=\"color: #008000; font-weight: bold\">new</span> ThreadLocal&lt;Random&gt;(() =&gt; {\n\t\t\t<span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #0000FF\">Random</span>(<span style=\"color: #666666\">2</span>);\n\t\t});\n\t<span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">RandomThread</span>()\n\t{\n\t\t<span style=\"color: #008000; font-weight: bold\">for</span> (<span style=\"color: #B00040\">int</span> i = <span style=\"color: #666666\">0</span>; i &lt; <span style=\"color: #666666\">5</span>; i++)\n\t\t{\n\t\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"{0}\"</span>, RandomGenerator.Value.Next(<span style=\"color: #666666\">10</span>));\n\t\t\tThread.Sleep(<span style=\"color: #666666\">500</span>);\n\t\t}\n\t}\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n\t{\n\t\tThread t1 = <span style=\"color: #008000; font-weight: bold\">new</span> Thread(RandomThread);\n\t\tThread t2 = <span style=\"color: #008000; font-weight: bold\">new</span> Thread(RandomThread);\n\t\tt1.Start();\n\t\tt2.Start();\n\n\t\tt1.Join();\n\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"Terminated\"</span>);\n\t}\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "",
                "20"
            ],
            "flags": 0,
            "guid": "L:,QsjB*$g",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Threads"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the ThreadStatic attribute do?",
                "Specifies a static attribute that is instantiated for each thread.<div><br></div><div>This means each of the two threads in the program refer to their own instance of the shoutItOutLoud static variable.</div>",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Program</span>\n{\n<span style=\"color: #7D9029\">\t[ThreadStatic]</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #B00040\">bool</span> shoutItOutLoud;\n\t<span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #B00040\">bool</span> isRunning = <span style=\"color: #008000; font-weight: bold\">true</span>;\n\t\n\t<span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">ClockThread</span>(<span style=\"color: #B00040\">string</span> ticktock)\n\t{\n\t\t<span style=\"color: #008000; font-weight: bold\">while</span> (isRunning)\n\t\t{\n\t\t\t<span style=\"color: #008000; font-weight: bold\">if</span> (shoutItOutLoud)\n\t\t\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"{0}\"</span>, ticktock);\n\t\t\tThread.Sleep(<span style=\"color: #666666\">1000</span>);\n\t\t\tshoutItOutLoud = !shoutItOutLoud;\n\t\t}\n\t}\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>()\n\t{\n\t\tThread tick = <span style=\"color: #008000; font-weight: bold\">new</span> Thread(() =&gt; {\n\t\t\tshoutItOutLoud = <span style=\"color: #008000; font-weight: bold\">true</span>;\n\t\t\tClockThread(<span style=\"color: #BA2121\">\"tick\"</span>);\n\t\t});\n\t\tThread tock = <span style=\"color: #008000; font-weight: bold\">new</span> Thread(() =&gt; {\n\t\t\tshoutItOutLoud = <span style=\"color: #008000; font-weight: bold\">false</span>;\n\t\t\tClockThread(<span style=\"color: #BA2121\">\"tock\"</span>);\n\t\t});\n\t\ttick.Start();\n\t\ttock.Start();\n\t\t\n\t\tThread.Sleep(<span style=\"color: #666666\">5000</span>);\n\t\t\n\t\tisRunning = <span style=\"color: #008000; font-weight: bold\">false</span>;\n\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"Terminated\"</span>);\n\t}\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "",
                "20"
            ],
            "flags": 0,
            "guid": "qT11^g^)%i",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Threads"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How do you get context information on a thread?",
                "Thread.CurrentThread exposes information like Name, CurrentCulture, IsBackground, etc.",
                "",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Program</span>\n{\t\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n\t{\n\t\tThread ct = Thread.CurrentThread;\n\t\tct.Name = <span style=\"color: #BA2121\">\"Main thread\"</span>;\n\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"Name: {0}\"</span>, ct.Name);\n\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"Culture: {0}\"</span>, ct.CurrentCulture);\n\t}\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "21"
            ],
            "flags": 0,
            "guid": "s~mKW#-T:`",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Threads"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a thread pool?<div><br><div>When do you want to use one?</div></div>",
                "A thread pool is a collection of pre-instantiated idle threads waiting for work.<div><br></div><div>It is the preferred way to do concurrent work when there are a large number of short tasks, rather than a small number of long ones.</div>",
                "",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Program</span>\n{\t\n\t<span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">DoWork</span>(<span style=\"color: #B00040\">object</span> state)\n\t{\n\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"Doing {0}\"</span>, state);\n\t\tThread.Sleep(<span style=\"color: #666666\">500</span>);\n\t}\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n\t{\n\t\t<span style=\"color: #008000; font-weight: bold\">for</span> (<span style=\"color: #B00040\">int</span> i = <span style=\"color: #666666\">0</span>; i &lt; <span style=\"color: #666666\">50</span>; i++)\n\t\t{\n\t\t\t<span style=\"color: #B00040\">int</span> num = i;\n\t\t\tThreadPool.QueueUserWorkItem(state =&gt; DoWork(state));\n\t\t}\n\t\tConsole.WriteLine(<span style=\"color: #BA2121\">\"Terminated\"</span>);\n\t}\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "22"
            ],
            "flags": 0,
            "guid": "usC/f&g$8P",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Threads"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A ThreadPool executes all assigned tasks concurrently. Correct?",
                "No.<div><br></div><div>A ThreadPool restricts the number of active threads to prevent overwhelming the device. Threads that aren't executed immediately are queued.</div>",
                "",
                "",
                "23"
            ],
            "flags": 0,
            "guid": "iTqGu(@-jT",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Threads"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is it not a good idea to use a ThreadPool? (4)",
                "<ul>\n<li>\nWhen assigned tasks may be idle for a long time; the threadpool may be blocked by idle processes because only a limited number of threads can be executed simultaneously.\n</li>\n<li>\nIf you need to manage thread priority; you cannot manage priority of ThreadPool threads.\n</li>\n<li>\nWhen you need foreground processes; Threads from a ThreadPool cannot be foreground processes.\n</li>\n<li>\nWhen you are using local state; local state variables aren't cleared when a thread is reused.</li>\n</ul>",
                "",
                "",
                "23"
            ],
            "flags": 0,
            "guid": "Oq%{@Ur#<",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Threads"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "If you want to use a {{c1::large}} number of processes&nbsp;that are&nbsp;{{c2::short}} and have {{c2::background}} priority, you should use a&nbsp;{{c3::ThreadPool}}<br>",
                ""
            ],
            "flags": 0,
            "guid": "xV0U>WBmr%",
            "note_model_uuid": "e48ef04b-3b80-11ea-923c-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Threads"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What happens in this program?",
                "It crashes.<div><br></div><div>The task tries to set the text value of a UI element, but the UI element is blocked by ('marshalled for') the UI thread.</div>",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Program</span>\n{\t\n\t<span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">double</span> <span style=\"color: #0000FF\">computeAverages</span>(<span style=\"color: #B00040\">long</span> noOfValues)\n\t{\n\t\t...;\n\t}\n\t<span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">StartButton_Click</span>(<span style=\"color: #B00040\">object</span> sender, RoutedEventArgs e)\n\t{\n\t\t<span style=\"color: #B00040\">long</span> noOfValues = <span style=\"color: #B00040\">long</span>.Parse(NoOfValuesTextBox.Text);\n\t\tTask.Run(() =&gt; {\n\t\t\tResultTextBlock.Text = <span style=\"color: #BA2121\">\"Result: \"</span> + computeAverages(noOfValues);\n    \t        });\n\t}\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "<center></center><br>",
                "25"
            ],
            "flags": 0,
            "guid": "Q+E1uNk>3w",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Threads"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The&nbsp;{{c1::async}} keyword is used to&nbsp;{{c2::flag a method as asynchronous}}. An&nbsp;{{c2::asynchronous}} method must contain one or more actions tagged with the {{c1::await}} keyword.",
                ""
            ],
            "flags": 0,
            "guid": "ubvym@nytB",
            "note_model_uuid": "e48ef04b-3b80-11ea-923c-6214b3b1c8f9",
            "tags": [
                "Ch1",
                "Threads"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the preferred way to display the result of an long-running action in a UI element?",
                "Wrap the action in a method that returns a Task, and use async - await before assigning the result.",
                "",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Program</span>\n{\t\n\t<span style=\"color: #008000; font-weight: bold\">private</span> Task&lt;<span style=\"color: #B00040\">double</span>&gt; asyncComputeAverages(<span style=\"color: #B00040\">long</span> noOfValues)\n\t{\n\t\t<span style=\"color: #008000; font-weight: bold\">return</span> Task&lt;<span style=\"color: #B00040\">double</span>&gt;.Run(() =&gt;\n\t\t{\n\t\t\t<span style=\"color: #008000; font-weight: bold\">return</span> ...;\n\t\t});\n\t}\n\t<span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #008000; font-weight: bold\">async</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">StartButton_Click</span>(<span style=\"color: #B00040\">object</span> sender, RoutedEventArgs e)\n\t{\n\t\t<span style=\"color: #B00040\">long</span> noOfValues = <span style=\"color: #B00040\">long</span>.Parse(NoOfValuesTextBox.Text);\n\t\t<span style=\"color: #B00040\">double</span> result = <span style=\"color: #008000; font-weight: bold\">await</span> asyncComputeAverages(noOfValues);\n\t\tResultTextBlock.Text = <span style=\"color: #BA2121\">\"Result \"</span> + result.ToString();\n\t}\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "26"
            ],
            "flags": 0,
            "guid": "o|B5^gf]:)",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1::Threads::AsyncAwait"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why do async functions always need to return a result?",
                "Because when they don't it's impossible to catch exceptions.<div><br></div><div>An otherwise void method should return a status value when used async.</div>",
                "",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Program</span>\n{\n\t<span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">readonly</span> HttpClient httpClient = <span style=\"color: #008000; font-weight: bold\">new</span> HttpClient();\n\t<span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #008000; font-weight: bold\">async</span> Task&lt;<span style=\"color: #B00040\">string</span>&gt; FetchWebPage(<span style=\"color: #B00040\">string</span> url)\n\t{\n\t\t<span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">await</span> httpClient.GetStringAsync(url);\n\t}\n\t\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">async</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n\t{\n\t\t<span style=\"color: #B00040\">string</span> url = args[<span style=\"color: #666666\">0</span>];\n\t\t<span style=\"color: #008000; font-weight: bold\">try</span>\n\t\t{\n\t\t\t<span style=\"color: #B00040\">string</span> someResult = <span style=\"color: #008000; font-weight: bold\">await</span> FetchWebPage(url);\n\t\t}\n\t\t<span style=\"color: #008000; font-weight: bold\">catch</span> (HttpRequestException e)\n\t\t{\n\t\t\tConsole.WriteLine(e);\n\t\t}\n\t}\n}\n</pre></div>\n</td></tr></tbody></table></center>",
                "28"
            ],
            "flags": 0,
            "guid": "Ezzl}Ke|+D",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1::Threads::AsyncAwait"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Async methods should always return a value, except&nbsp;{{c1::event handlers}}",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #008000; font-weight: bold\">async</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Button_Click</span>(<span style=\"color: #B00040\">object</span> sender, RoutedEventArgs e)\n{\n    ...;\n}\n</pre></div>\n</td></tr></tbody></table></center><br>"
            ],
            "flags": 0,
            "guid": "~_TR5]-:]",
            "note_model_uuid": "e48ef04b-3b80-11ea-923c-6214b3b1c8f9",
            "tags": [
                "Ch1::Threads::AsyncAwait"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Describe how you would create an awaitable task that performs many sub-tasks and waits for them to complete.",
                "Create an async method that returns a task. The method creates a list of inner tasks, and awaits the list of tasks with Task.WhenAll.",
                "",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">async</span> Task&lt;IEnumerable&lt;<span style=\"color: #B00040\">string</span>&gt;&gt; AsyncDoStuff(<span style=\"color: #B00040\">string</span> [] stuffs)\n{\n\t<span style=\"color: #B00040\">var</span> innerTasks = <span style=\"color: #008000; font-weight: bold\">new</span> List&lt;Task&lt;<span style=\"color: #B00040\">string</span>&gt;&gt;();\n\t\n\t<span style=\"color: #008000; font-weight: bold\">foreach</span> (<span style=\"color: #B00040\">string</span> stuff <span style=\"color: #008000; font-weight: bold\">in</span> stuffs)\n\t{\n\t\tinnerTasks.Add(DoStuff(stuff));\n\t}\n\t<span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">await</span> Task.WhenAll(innerTasks);\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "28"
            ],
            "flags": 0,
            "guid": "xPe7bv1b:V",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1::Threads::AsyncAwait"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What happens in the following code snippet?<div><br></div><div><center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4\n5\n6\n7\n8\n9</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n{\n    <span style=\"color: #B00040\">string</span>[] names = { <span style=\"color: #BA2121\">\"Waldo\"</span>, <span style=\"color: #BA2121\">\"Foo\"</span>, <span style=\"color: #BA2121\">\"Bar\"</span> };\n\n    <span style=\"color: #008000; font-weight: bold\">foreach</span> (<span style=\"color: #B00040\">string</span> name <span style=\"color: #008000; font-weight: bold\">in</span> names)\n    {\n        name = name.ToUpper();\n    }\n}\n</pre></div>\n</td></tr></tbody></table></center><br></div>",
                "Nothing, because it doesn't compile.<div><br></div><div>It isn't possible to modify the iterating value (line 7).</div><div><br></div><div>NB. It <i>is</i>&nbsp;possible to modify contents of an object (the iterating value is the object reference)</div>",
                "",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">foreach</span> (<span style=\"color: #B00040\">string</span> person <span style=\"color: #008000; font-weight: bold\">in</span> people)\n{\n    person.name = person.name.ToUpper();\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "53"
            ],
            "flags": 0,
            "guid": "Ec,hbH0[Ui",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1::Loops"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Objects that implement the {{c1::IEnumerable}} interface expose a method called {{c2::GetIterator()}} that returns an object implementing the {{c1::IEnumerator}} interface. The {{c1::IEnumerator}} interface exposes methods that {{c2::can be used to get the next item from the enumerator}} and {{c2::determine if there are any more items in the collection}}.",
                ""
            ],
            "flags": 0,
            "guid": "Q~~9>FU8?Y",
            "note_model_uuid": "e48ef04b-3b80-11ea-923c-6214b3b1c8f9",
            "tags": [
                "Ch1::Loops"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What's the difference between<div><br></div><div><center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">if</span> (foo &gt; bar &amp; foo &gt; <span style=\"color: #666666\">0</span>)\n{\n    Console.WriteLine(<span style=\"color: #BA2121\">\"Foo!\"</span>);\n}\n</pre></div>\n</td></tr></tbody></table></center>and</div><div><br></div><div><center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">if</span> (foo &gt; bar &amp;&amp; foo &gt; <span style=\"color: #666666\">0</span>)\n{\n    Console.WriteLine(<span style=\"color: #BA2121\">\"Foo!\"</span>);\n}\n</pre></div>\n</td></tr></tbody></table></center>?</div>",
                "The first version uses the logical operator '&amp;', which is not conditional, unlike the '&amp;&amp;' operator used in the second version. This means the logical expression in the second version is short-circuited; when the first operand resolves to false, the second operand is not evaluated.",
                "",
                "",
                "56"
            ],
            "flags": 0,
            "guid": "Iktc0fMoP5",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1::Flow::Operators"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why are the conditional versions '&amp;&amp;' and '||' prefered over the logical operators '&amp;' and '|'?",
                "The conditional versions are short-circuited. This means that &amp;&amp; stops evaluation after the first operand which returns false, and that || stops evaluation after the first operand which returns true. This improves program performance.",
                "",
                "",
                "57"
            ],
            "flags": 0,
            "guid": "Q/1c0m9ohF",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1::Flow::Operators"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Expressions are constructed out of {{c1::operators}} and {{c1::operands}}. {{c1::Operands}} can be {{c2::any literal value or variable}}, while {{c1::operators}} specify {{c2::actions to be performed}}. The {{c2::context}} of the {{c1::operator}} determines the actual behaviour. {{c1::Operators}} can be {{c2::unary/monadic}}, {{c2::binary}} or {{c2::ternary}}, and their {{c2::precedence/priority}} determines {{c3::in which order they are performed}}. When two {{c1::operators}} have the same {{c2::precedence}}, the {{c3::order of evaluation}} is further determined by their {{c2::associativity (left to right or right to left)}}.",
                ""
            ],
            "flags": 0,
            "guid": "ea>+:dW+~a",
            "note_model_uuid": "e48ef04b-3b80-11ea-923c-6214b3b1c8f9",
            "tags": [
                "Ch1::Flow::Operators"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "After line 7, what's the value of a, b, c and foo?<br><div><br></div><div><center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4\n5\n6\n7\n8</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n{\n    <span style=\"color: #B00040\">int</span> foo = <span style=\"color: #666666\">42</span>;\n\n    <span style=\"color: #B00040\">int</span> a, b, c;\n\n    a = b = c = foo--;\n}\n</pre></div>\n</td></tr></tbody></table></center>Explain.</div>",
                "a = 42, b = 42, c = 42, foo = 41<div><br></div><div>The assignment operators have right-to-left associativity, while the postfix decrement operator has left-to-right associativity.</div>",
                "",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4\n5\n6\n7\n8</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n{\n    <span style=\"color: #B00040\">int</span> foo = <span style=\"color: #666666\">42</span>;\n\n    <span style=\"color: #B00040\">int</span> a, b, c;\n\n    a = b = c = --foo;\n}\n</pre></div>\n</td></tr></tbody></table></center>If we use the prefix decrement operator, which is right-to-left associative, then the value of a, b and c would be 41.",
                "59"
            ],
            "flags": 0,
            "guid": "NeMj$#W64e",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1::Flow::Operators"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "{{c1::Events}} are {{c2::the mechanism by which one component can send messages to another}}.",
                ""
            ],
            "flags": 0,
            "guid": "j@RU-Q/160",
            "note_model_uuid": "e48ef04b-3b80-11ea-923c-6214b3b1c8f9",
            "tags": [
                "Ch1::Flow::Operators"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A {{c1::delegate}} is {{c2::a reference to a particular method in a class}}. An {{c2::event publisher}} calls the {{c1::delegate}} when the event occurs, upon which {{c2::the method will run in the subscriber}}.",
                ""
            ],
            "flags": 0,
            "guid": "K,dCq3E*pp",
            "note_model_uuid": "e48ef04b-3b80-11ea-923c-6214b3b1c8f9",
            "tags": [
                "Ch1::Flow::Delegates"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What happens in the following program?",
                "",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Program</span>\n{\n    <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Alarm</span>\n    {\n        <span style=\"color: #008000; font-weight: bold\">public</span> Action OnAlarmRaised { <span style=\"color: #008000; font-weight: bold\">get</span>; <span style=\"color: #008000; font-weight: bold\">set</span>; }\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">RaiseAlarm</span>()\n        {\n            OnAlarmRaised?.Invoke();\n        }\n    }\n\n    <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n    {\n        Alarm alarm = <span style=\"color: #008000; font-weight: bold\">new</span> Alarm();\n\n        <span style=\"color: #B00040\">var</span> actions = args\n            .Select(x =&gt; <span style=\"color: #008000; font-weight: bold\">new</span> Action(() =&gt; Console.WriteLine(x + <span style=\"color: #BA2121\">\"!\"</span>)))\n            .ToArray();\n\n        Array.ForEach(actions, action =&gt; alarm.OnAlarmRaised += action);\n\n        alarm.RaiseAlarm();\n    }\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "The program transforms command line arguments into Action delegates, then passes those actions to an event publisher (instance of the Alarm class). When the alarm is raised, the behaviours added to the delegate are invoked.<div><br></div><div>NB. Action delegates can be added to an existing delegate using += because that operator is <i>overloaded</i>. The call order is not guaranteed.</div><div>NB2. OnAlarmRaised has an Invoke method because the delegate exposes it. The null conditional operator ensures Invoke is only called when the Action is initialized.</div>",
                "62"
            ],
            "flags": 0,
            "guid": "ho4m?(>nU_",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1::Flow::Events"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How would you rewrite the following code, and why?",
                "- Instead of an Action property which is publicly modifiable, we can use a field&nbsp;that specifies the delegate as an <i>event</i>. This means OnAlarmRaised can no longer be assigned values from outside of the class, and the delegate cannot be invoked outside of the class.<div>- Instead of an Action we should use the EventHandler class. The EventHandler delegate subscriber method expects two arguments; the publisher and an EventArgs object.<br><div>- By instantiating the event field with an empty delegate the null check in RaiseAlarm is no longer required.</div></div>",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4\n5\n6\n7\n8</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Alarm</span>\n{\n    <span style=\"color: #008000; font-weight: bold\">public</span> Action OnAlarmRaised { <span style=\"color: #008000; font-weight: bold\">get</span>; <span style=\"color: #008000; font-weight: bold\">set</span>; }\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">RaiseAlarm</span>()\n    {\n        OnAlarmRaised?.Invoke();\n    }\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4\n5\n6\n7\n8</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Alarm</span>\n{\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">event</span> EventHandler OnAlarmRaised = <span style=\"color: #008000; font-weight: bold\">delegate</span> { };\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">RaiseAlarm</span>()\n    {\n        OnAlarmRaised(this, EventArgs.empty);\n    }\n}\n</pre></div>\n</td></tr></tbody></table></center>",
                "65"
            ],
            "flags": 0,
            "guid": "Q^*G-H`e0_",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1::Flow::Events"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How many nested structures does it take to invoke a single delegate from a publisher class in a safe way?",
                "Too fucking many.<div><br></div><div>i.e.</div><div>A statement in a try-catch block in a foreach loop in a method on a class (in a namespace).</div>",
                "",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Alarm</span>\n{\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">event</span> EventHandler OnAlarmRaised = <span style=\"color: #008000; font-weight: bold\">delegate</span> { };\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">RaiseAlarm</span>()\n    {\n        List&lt;Exception&gt; exceptions = <span style=\"color: #008000; font-weight: bold\">new</span> List&lt;Exception&gt;();\n\n        <span style=\"color: #008000; font-weight: bold\">foreach</span> (Delegate handler <span style=\"color: #008000; font-weight: bold\">in</span> OnAlarmRaised.GetInvocationList())\n        {\n            <span style=\"color: #008000; font-weight: bold\">try</span>\n            {\n                handler.DynamicInvoke(<span style=\"color: #008000; font-weight: bold\">this</span>, EventArgs.Empty);\n            }\n            <span style=\"color: #008000; font-weight: bold\">catch</span> (TargetInvocationException exception)\n            {\n                exceptions.Add(exception.InnerException);\n            }\n        }\n\n        <span style=\"color: #008000; font-weight: bold\">if</span> (exceptions.Count &gt; <span style=\"color: #666666\">0</span>)\n            <span style=\"color: #008000; font-weight: bold\">throw</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #0000FF\">AggregateException</span>(exceptions);\n    }\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "67"
            ],
            "flags": 0,
            "guid": "QKUehNhMvK",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1::Flow::Events"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Describe how to ensure all subscribers are called when an event is triggered, while aggregating exceptions along the way.",
                "Instead of invoking all delegates at once we can invoke each in turn within a try-catch block. Inside the catch block, we receive a TargetInvocationException, of which we can add the innerException to a list of exceptions. When we're done with our list of delegates we throw a new AggregateException with the list of exceptions - if any occurred.",
                "",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Alarm</span>\n{\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">event</span> EventHandler OnAlarmRaised = <span style=\"color: #008000; font-weight: bold\">delegate</span> { };\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">RaiseAlarm</span>()\n    {\n        List&lt;Exception&gt; exceptions = <span style=\"color: #008000; font-weight: bold\">new</span> List&lt;Exception&gt;();\n\n        <span style=\"color: #008000; font-weight: bold\">foreach</span> (Delegate handler <span style=\"color: #008000; font-weight: bold\">in</span> OnAlarmRaised.GetInvocationList())\n        {\n            <span style=\"color: #008000; font-weight: bold\">try</span>\n            {\n                handler.DynamicInvoke(<span style=\"color: #008000; font-weight: bold\">this</span>, EventArgs.Empty);\n            }\n            <span style=\"color: #008000; font-weight: bold\">catch</span> (TargetInvocationException exception)\n            {\n                exceptions.Add(exception.InnerException);\n            }\n        }\n\n        <span style=\"color: #008000; font-weight: bold\">if</span> (exceptions.Count &gt; <span style=\"color: #666666\">0</span>)\n            <span style=\"color: #008000; font-weight: bold\">throw</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #0000FF\">AggregateException</span>(exceptions);\n    }\n}\n</pre></div>\n</td></tr></tbody></table></center><center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n{\n    Alarm alarm = <span style=\"color: #008000; font-weight: bold\">new</span> Alarm();\n\n    alarm.OnAlarmRaised += AlarmListener1;\n    alarm.OnAlarmRaised += AlarmListener2;\n\n    <span style=\"color: #008000; font-weight: bold\">try</span>\n    {\n        alarm.RaiseAlarm();\n    }\n    <span style=\"color: #008000; font-weight: bold\">catch</span> (AggregateException exceptions)\n    {\n        <span style=\"color: #008000; font-weight: bold\">foreach</span> (Exception exception <span style=\"color: #008000; font-weight: bold\">in</span> exceptions.InnerExceptions)\n            Console.WriteLine(exception.Message);\n    }\n\n    Console.WriteLine(<span style=\"color: #BA2121\">\"Terminated\"</span>);\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "67"
            ],
            "flags": 0,
            "guid": "Hi3ub~kIlm",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1::Flow::Events"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a BlockingCollection?",
                "A collection in which Take blocks a task if there are no items to be taken, and Add blocks a task when the collection is full.",
                "",
                "",
                "29"
            ],
            "flags": 0,
            "guid": "nlQDZ{)F}X",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1::Flow::Tasks"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "By default, a BlockingCollection uses a&nbsp;{{c1::ConcurrentQueue}}, which operates on a&nbsp;{{c1::\"first-in-first-out\"}} basis.",
                ""
            ],
            "flags": 0,
            "guid": "g;fqf:G7+b",
            "note_model_uuid": "e48ef04b-3b80-11ea-923c-6214b3b1c8f9",
            "tags": [
                "Ch1::Flow::Tasks"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The&nbsp;{{c1::ConcurrentBag}} stores items {{c2::in an unordered collection}}.",
                ""
            ],
            "flags": 0,
            "guid": "sxF5lYK}KB",
            "note_model_uuid": "e48ef04b-3b80-11ea-923c-6214b3b1c8f9",
            "tags": [
                "Ch1::Flow::Tasks"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The statement x += 1; is an atomic operation. Correct?",
                "No. The statement involves reading, updating and storing - all of which can be interrupted.",
                "",
                "",
                "37"
            ],
            "flags": 0,
            "guid": "j{{.24W.+2",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1::Flow::Tasks"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between 'delegate' and 'Delegate'?",
                "'delegate' is a keyword that tells the compiler to create a delegate type.<div>'Delegate' is an abstract class that defines the behaviour of delegate instances.</div>",
                "",
                "",
                "69"
            ],
            "flags": 0,
            "guid": "s/{)<-eonQ",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch1::Flow::Tasks"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Give an example of a value type (struct) in the .NET library.",
                "DateTime",
                "",
                "",
                "97"
            ],
            "flags": 0,
            "guid": "i>=;hz0!p{",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch2::Value&Reference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "You want to store a Coord with values for x, y and z. Do you use a value type or a reference type?",
                "Value type<div><br></div><div>You probably want to treat the coordinate as a single value, and not share coordinates among entities.</div>",
                "",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4\n5\n6</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">struct</span> <span style=\"color: #0000FF; font-weight: bold\">Coord</span>\n{\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> x;\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> y;\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> z;\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "98"
            ],
            "flags": 0,
            "guid": "J%M8I!M1&c",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch2::Value&Reference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "If x and y are reference types, what is the outcome of the following program?",
                "x and y point to the same object after line 13. When x.Data is assigned 100, y.Data and x.Data both refer to the same value.",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Program</span>\n{\n    <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Foo</span>\n    {\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> Data { <span style=\"color: #008000; font-weight: bold\">get</span>; <span style=\"color: #008000; font-weight: bold\">set</span>; } = <span style=\"color: #666666\">42</span>;\n    }\n\n    <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n    {\n        <span style=\"color: #B00040\">var</span> y = <span style=\"color: #008000; font-weight: bold\">new</span> Foo();\n        <span style=\"color: #B00040\">var</span> x = <span style=\"color: #008000; font-weight: bold\">new</span> Foo();\n            \n        x = y;\n        x.Data = <span style=\"color: #666666\">100</span>;\n\n    }\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "",
                "96"
            ],
            "flags": 0,
            "guid": "k@LbH0OaTl",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch2::Value&Reference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What happens in the following program?<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">struct</span> <span style=\"color: #0000FF; font-weight: bold\">Foo</span>\n{\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> Data { <span style=\"color: #008000; font-weight: bold\">get</span>; <span style=\"color: #008000; font-weight: bold\">set</span>; } = <span style=\"color: #666666\">42</span>;\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "It doesn't compile.<div><br></div><div>It isn't possible to initialize data members in a structure. We can provide a parameterized constructor instead. The constructor must initialize all data members of the structure.</div>",
                "<center><center></center><br></center>",
                "<center><center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4\n5\n6\n7\n8</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">struct</span> <span style=\"color: #0000FF; font-weight: bold\">Foo</span>\n{\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> Data { <span style=\"color: #008000; font-weight: bold\">get</span>; <span style=\"color: #008000; font-weight: bold\">set</span>; }\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">Foo</span>(<span style=\"color: #B00040\">int</span> data)\n    {\n        Data = data;\n    }\n}\n</pre></div>\n</td></tr></tbody></table></center><br></center>",
                "99"
            ],
            "flags": 0,
            "guid": "eU*YeHU/WF",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch2::Value&Reference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How would you implement the Alien in the following program <i>as a value type</i>?",
                "",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n{\n    <span style=\"color: #B00040\">var</span> x = <span style=\"color: #008000; font-weight: bold\">new</span> Alien(<span style=\"color: #666666\">100</span>, <span style=\"color: #666666\">100</span>, <span style=\"color: #666666\">16</span>);\n    <span style=\"color: #B00040\">var</span> y = <span style=\"color: #008000; font-weight: bold\">new</span> Alien(<span style=\"color: #666666\">0</span>, <span style=\"color: #666666\">0</span>, <span style=\"color: #666666\">42</span>);\n\n    Alien[] swarm = <span style=\"color: #008000; font-weight: bold\">new</span> Alien[<span style=\"color: #666666\">2</span>] { x, y };\n\n    <span style=\"color: #008000; font-weight: bold\">foreach</span> (<span style=\"color: #B00040\">var</span> alien <span style=\"color: #008000; font-weight: bold\">in</span> swarm)\n    {\n        Console.WriteLine(alien);\n    }\n}\n</pre></div>\n</td></tr></tbody></table>generates the following output:</center><center><br></center><center>Alien at 100,100 with 16 health<br>Alien at 0,0 with 42 health<br></center><br>",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">struct</span> <span style=\"color: #0000FF; font-weight: bold\">Alien</span>\n{\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> X;\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> Y;\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> HP;\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">Alien</span>(<span style=\"color: #B00040\">int</span> x, <span style=\"color: #B00040\">int</span> y, <span style=\"color: #B00040\">int</span> hp)\n    {\n        X = x;\n        Y = y;\n        HP = hp;\n    }\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">override</span> <span style=\"color: #B00040\">string</span> <span style=\"color: #0000FF\">ToString</span>()\n    {\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"border: 1px solid #FF0000\">$</span><span style=\"color: #BA2121\">\"Alien at {X},{Y} with {HP} health\"</span>;\n    }\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "100"
            ],
            "flags": 0,
            "guid": "AeMt!M[<(s",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch2::Value&Reference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the default value and type of an enumerated type?",
                "An int starting at 0.",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4\n5\n6</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">enum</span> Tea\n{\n    Hot,\n    Cold,\n    Ice\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4\n5</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">enum</span> Soup : <span style=\"color: #B00040\">byte</span>\n{ \n    TooHot=<span style=\"color: #666666\">254</span>,\n    TooCold,\n}\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "101"
            ],
            "flags": 0,
            "guid": "E}O9vieE0C",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch2::Value&Reference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the output of the following alienating program?",
                "The program creates 100 aliens with a fixed set of coordinates (0,0) and an HP property set anywhere between 1 and 100 (inclusive).<div>The program selects the aliens with HP above 50 (the \"healthy bunch\"), and prints their information.</div>",
                "<center><center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Program</span>\n{\n    <span style=\"color: #008000; font-weight: bold\">struct</span> <span style=\"color: #0000FF; font-weight: bold\">Coord</span>\n    {\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> X;\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> Y;\n\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">Coord</span>(<span style=\"color: #B00040\">int</span> x, <span style=\"color: #B00040\">int</span> y)\n        {\n            X = x;\n            Y = y;\n        }\n    }\n\n    <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Alien</span>\n    {\n        <span style=\"color: #008000; font-weight: bold\">static</span> Random random = <span style=\"color: #008000; font-weight: bold\">new</span> Random();\n\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> X;\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> Y;\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> HP;\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">Alien</span>(<span style=\"color: #B00040\">int</span> x, <span style=\"color: #B00040\">int</span> y)\n        {\n            X = x;\n            Y = y;\n            HP = random.Next(<span style=\"color: #666666\">1</span>, <span style=\"color: #666666\">101</span>);\n        }\n\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">override</span> <span style=\"color: #B00040\">string</span> <span style=\"color: #0000FF\">ToString</span>()\n        {\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"border: 1px solid #FF0000\">$</span><span style=\"color: #BA2121\">\"Alien at {X},{Y} with {HP} health\"</span>;\n        }\n    }\n\n    <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">void</span> <span style=\"color: #0000FF\">Main</span>(<span style=\"color: #B00040\">string</span>[] args)\n    {\n        <span style=\"color: #B00040\">var</span> x = <span style=\"color: #008000; font-weight: bold\">new</span> Alien(<span style=\"color: #666666\">100</span>, <span style=\"color: #666666\">100</span>);\n        <span style=\"color: #B00040\">var</span> y = <span style=\"color: #008000; font-weight: bold\">new</span> Alien(<span style=\"color: #666666\">0</span>, <span style=\"color: #666666\">0</span>);\n\n        List&lt;Alien&gt; swarm = Enumerable\n            .Repeat(<span style=\"color: #008000; font-weight: bold\">new</span> Coord(<span style=\"color: #666666\">0</span>, <span style=\"color: #666666\">0</span>), <span style=\"color: #666666\">100</span>)\n            .Select(start =&gt; <span style=\"color: #008000; font-weight: bold\">new</span> Alien(start.X, start.Y))\n            .ToList();\n\n        <span style=\"color: #B00040\">var</span> healthyBunch = <span style=\"color: #008000; font-weight: bold\">from</span> alien <span style=\"color: #008000; font-weight: bold\">in</span> swarm\n                           <span style=\"color: #008000; font-weight: bold\">where</span> alien.HP &gt; <span style=\"color: #666666\">50</span>\n                           <span style=\"color: #008000; font-weight: bold\">select</span> alien;\n\n        <span style=\"color: #008000; font-weight: bold\">foreach</span> (<span style=\"color: #B00040\">var</span> buff <span style=\"color: #008000; font-weight: bold\">in</span> healthyBunch)\n        {\n            Console.WriteLine(buff);\n        }\n    }\n}\n</pre></div>\n</td></tr></tbody></table></center></center><br>",
                "",
                ""
            ],
            "flags": 0,
            "guid": "P4uYXX0A2:",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch2::Value&Reference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why can a reference type not be kept on the <i>stack</i>?",
                "<div>The stack stores variables of value type, and is allocated and removed upon entering or leaving a block.</div>Because the reference may need to be kept when entering or leaving a block (e.g. a function) reference type instances need to be kept on the <i>heap</i>. Garbage collection decides whether to keep the reference type instance depending on whether there are still active references to it.",
                "",
                "",
                "103"
            ],
            "flags": 0,
            "guid": "vn)ulo3Y%Q",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch2::Value&Reference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Structure instances are always created on the <i>stack</i>. Correct?",
                "No.<div><br></div><div>While generally true, a structure is created on the <i>heap</i>&nbsp;when used in a closure. Why? Because it needs to be maintained even though the program has already left the block in which it was created.</div>",
                "",
                "",
                "99"
            ],
            "flags": 0,
            "guid": "DPfdr+V~eS",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch2::Value&Reference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How can we limit the MyStack class to accept only iterable types?",
                "By specifying a generic constraint to the interface IEnumerable.",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">MyStack</span>&lt;T&gt;\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "<center><table class=\"highlighttable\"><tbody><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1</pre></div></td><td class=\"code\"><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">MyStack</span>&lt;T&gt; <span style=\"color: #008000; font-weight: bold\">where</span> T : IEnumerable\n</pre></div>\n</td></tr></tbody></table></center><br>",
                "104"
            ],
            "flags": 0,
            "guid": "K~A:,%VR:d",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch2::Value&Reference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Have you investigated how generic collection classes work to learn more about generic features in C#?",
                "Yes, of course! :sweaty-smile:",
                "",
                "",
                "105"
            ],
            "flags": 0,
            "guid": "tkpO3zIMnU",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch2::Value&Reference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the <i>new</i>&nbsp;keyword do? (3)",
                "<ul>\n<li>Loads the program code that implements the class into memory\n</li>\n<li>Initializes any static members and calls the static constructor, if this is the first object of its kind\n</li>\n<li>Calls the constructor class\n</li>\n</ul>",
                "",
                "",
                "110"
            ],
            "flags": 0,
            "guid": "H2^.9?:GPt",
            "note_model_uuid": "e48ea258-3b80-11ea-9b6b-6214b3b1c8f9",
            "tags": [
                "Ch2::Value&Reference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A class can contain members that are&nbsp;{{c1::methods}}, {{c1::data variables}}, or {{c1::properties}}. {{c1::Class methods}} allow a class {{c2::to provide behaviours that can be used by code running in other classes}}. {{c1::Data variables}} allow a class {{c2::to maintain state and manage the storage of information}}. {{c1::Properties}} provide a means {{c2::for managing access to data within a class}}.",
                ""
            ],
            "flags": 0,
            "guid": "u0y#+,^xiV",
            "note_model_uuid": "e48ef04b-3b80-11ea-923c-6214b3b1c8f9",
            "tags": [
                "Ch2::Value&Reference"
            ]
        }
    ]
}